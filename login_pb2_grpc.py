# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import login_pb2 as login__pb2

GRPC_GENERATED_VERSION = '1.66.1'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in login_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class LMSStub(object):
    """Define the LMS gRPC services
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Login = channel.unary_unary(
                '/lms.LMS/Login',
                request_serializer=login__pb2.LoginRequest.SerializeToString,
                response_deserializer=login__pb2.LoginResponse.FromString,
                _registered_method=True)
        self.UploadAssignment = channel.unary_unary(
                '/lms.LMS/UploadAssignment',
                request_serializer=login__pb2.AssignmentUploadRequest.SerializeToString,
                response_deserializer=login__pb2.AssignmentUploadResponse.FromString,
                _registered_method=True)
        self.CheckFeedback = channel.unary_unary(
                '/lms.LMS/CheckFeedback',
                request_serializer=login__pb2.FeedbackRequest.SerializeToString,
                response_deserializer=login__pb2.FeedbackResponse.FromString,
                _registered_method=True)
        self.CheckAssignmentStatus = channel.unary_unary(
                '/lms.LMS/CheckAssignmentStatus',
                request_serializer=login__pb2.AssignmentStatusRequest.SerializeToString,
                response_deserializer=login__pb2.AssignmentStatusResponse.FromString,
                _registered_method=True)
        self.GradeAssignment = channel.unary_unary(
                '/lms.LMS/GradeAssignment',
                request_serializer=login__pb2.GradeAssignmentRequest.SerializeToString,
                response_deserializer=login__pb2.GradeAssignmentResponse.FromString,
                _registered_method=True)
        self.PostQuery = channel.unary_unary(
                '/lms.LMS/PostQuery',
                request_serializer=login__pb2.QueryRequest.SerializeToString,
                response_deserializer=login__pb2.QueryResponse.FromString,
                _registered_method=True)
        self.CheckQueryReply = channel.unary_unary(
                '/lms.LMS/CheckQueryReply',
                request_serializer=login__pb2.CheckQueryReplyRequest.SerializeToString,
                response_deserializer=login__pb2.CheckQueryReplyResponse.FromString,
                _registered_method=True)
        self.ViewQueries = channel.unary_unary(
                '/lms.LMS/ViewQueries',
                request_serializer=login__pb2.QueryViewRequest.SerializeToString,
                response_deserializer=login__pb2.QueryViewResponse.FromString,
                _registered_method=True)
        self.ReplyToQuery = channel.unary_unary(
                '/lms.LMS/ReplyToQuery',
                request_serializer=login__pb2.ReplyToQueryRequest.SerializeToString,
                response_deserializer=login__pb2.ReplyToQueryResponse.FromString,
                _registered_method=True)
        self.UploadCourseMaterial = channel.unary_unary(
                '/lms.LMS/UploadCourseMaterial',
                request_serializer=login__pb2.CourseMaterialUploadRequest.SerializeToString,
                response_deserializer=login__pb2.CourseMaterialUploadResponse.FromString,
                _registered_method=True)
        self.ListCourseMaterials = channel.unary_unary(
                '/lms.LMS/ListCourseMaterials',
                request_serializer=login__pb2.CourseMaterialListRequest.SerializeToString,
                response_deserializer=login__pb2.CourseMaterialListResponse.FromString,
                _registered_method=True)
        self.DownloadCourseMaterial = channel.unary_unary(
                '/lms.LMS/DownloadCourseMaterial',
                request_serializer=login__pb2.CourseMaterialDownloadRequest.SerializeToString,
                response_deserializer=login__pb2.CourseMaterialDownloadResponse.FromString,
                _registered_method=True)
        self.ViewUngradedAssignments = channel.unary_unary(
                '/lms.LMS/ViewUngradedAssignments',
                request_serializer=login__pb2.ViewUngradedAssignmentsRequest.SerializeToString,
                response_deserializer=login__pb2.ViewUngradedAssignmentsResponse.FromString,
                _registered_method=True)
        self.ValidateToken = channel.unary_unary(
                '/lms.LMS/ValidateToken',
                request_serializer=login__pb2.ValidateTokenRequest.SerializeToString,
                response_deserializer=login__pb2.ValidateTokenResponse.FromString,
                _registered_method=True)
        self.GenerateAnswer = channel.unary_unary(
                '/lms.LMS/GenerateAnswer',
                request_serializer=login__pb2.AnswerRequest.SerializeToString,
                response_deserializer=login__pb2.AnswerResponse.FromString,
                _registered_method=True)
        self.AskQuestion = channel.unary_unary(
                '/lms.LMS/AskQuestion',
                request_serializer=login__pb2.QuestionRequest.SerializeToString,
                response_deserializer=login__pb2.AnswerResponse.FromString,
                _registered_method=True)


class LMSServicer(object):
    """Define the LMS gRPC services
    """

    def Login(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UploadAssignment(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CheckFeedback(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CheckAssignmentStatus(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GradeAssignment(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PostQuery(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CheckQueryReply(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ViewQueries(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ReplyToQuery(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UploadCourseMaterial(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListCourseMaterials(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DownloadCourseMaterial(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ViewUngradedAssignments(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ValidateToken(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GenerateAnswer(self, request, context):
        """LLM Model Module
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AskQuestion(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_LMSServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Login': grpc.unary_unary_rpc_method_handler(
                    servicer.Login,
                    request_deserializer=login__pb2.LoginRequest.FromString,
                    response_serializer=login__pb2.LoginResponse.SerializeToString,
            ),
            'UploadAssignment': grpc.unary_unary_rpc_method_handler(
                    servicer.UploadAssignment,
                    request_deserializer=login__pb2.AssignmentUploadRequest.FromString,
                    response_serializer=login__pb2.AssignmentUploadResponse.SerializeToString,
            ),
            'CheckFeedback': grpc.unary_unary_rpc_method_handler(
                    servicer.CheckFeedback,
                    request_deserializer=login__pb2.FeedbackRequest.FromString,
                    response_serializer=login__pb2.FeedbackResponse.SerializeToString,
            ),
            'CheckAssignmentStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.CheckAssignmentStatus,
                    request_deserializer=login__pb2.AssignmentStatusRequest.FromString,
                    response_serializer=login__pb2.AssignmentStatusResponse.SerializeToString,
            ),
            'GradeAssignment': grpc.unary_unary_rpc_method_handler(
                    servicer.GradeAssignment,
                    request_deserializer=login__pb2.GradeAssignmentRequest.FromString,
                    response_serializer=login__pb2.GradeAssignmentResponse.SerializeToString,
            ),
            'PostQuery': grpc.unary_unary_rpc_method_handler(
                    servicer.PostQuery,
                    request_deserializer=login__pb2.QueryRequest.FromString,
                    response_serializer=login__pb2.QueryResponse.SerializeToString,
            ),
            'CheckQueryReply': grpc.unary_unary_rpc_method_handler(
                    servicer.CheckQueryReply,
                    request_deserializer=login__pb2.CheckQueryReplyRequest.FromString,
                    response_serializer=login__pb2.CheckQueryReplyResponse.SerializeToString,
            ),
            'ViewQueries': grpc.unary_unary_rpc_method_handler(
                    servicer.ViewQueries,
                    request_deserializer=login__pb2.QueryViewRequest.FromString,
                    response_serializer=login__pb2.QueryViewResponse.SerializeToString,
            ),
            'ReplyToQuery': grpc.unary_unary_rpc_method_handler(
                    servicer.ReplyToQuery,
                    request_deserializer=login__pb2.ReplyToQueryRequest.FromString,
                    response_serializer=login__pb2.ReplyToQueryResponse.SerializeToString,
            ),
            'UploadCourseMaterial': grpc.unary_unary_rpc_method_handler(
                    servicer.UploadCourseMaterial,
                    request_deserializer=login__pb2.CourseMaterialUploadRequest.FromString,
                    response_serializer=login__pb2.CourseMaterialUploadResponse.SerializeToString,
            ),
            'ListCourseMaterials': grpc.unary_unary_rpc_method_handler(
                    servicer.ListCourseMaterials,
                    request_deserializer=login__pb2.CourseMaterialListRequest.FromString,
                    response_serializer=login__pb2.CourseMaterialListResponse.SerializeToString,
            ),
            'DownloadCourseMaterial': grpc.unary_unary_rpc_method_handler(
                    servicer.DownloadCourseMaterial,
                    request_deserializer=login__pb2.CourseMaterialDownloadRequest.FromString,
                    response_serializer=login__pb2.CourseMaterialDownloadResponse.SerializeToString,
            ),
            'ViewUngradedAssignments': grpc.unary_unary_rpc_method_handler(
                    servicer.ViewUngradedAssignments,
                    request_deserializer=login__pb2.ViewUngradedAssignmentsRequest.FromString,
                    response_serializer=login__pb2.ViewUngradedAssignmentsResponse.SerializeToString,
            ),
            'ValidateToken': grpc.unary_unary_rpc_method_handler(
                    servicer.ValidateToken,
                    request_deserializer=login__pb2.ValidateTokenRequest.FromString,
                    response_serializer=login__pb2.ValidateTokenResponse.SerializeToString,
            ),
            'GenerateAnswer': grpc.unary_unary_rpc_method_handler(
                    servicer.GenerateAnswer,
                    request_deserializer=login__pb2.AnswerRequest.FromString,
                    response_serializer=login__pb2.AnswerResponse.SerializeToString,
            ),
            'AskQuestion': grpc.unary_unary_rpc_method_handler(
                    servicer.AskQuestion,
                    request_deserializer=login__pb2.QuestionRequest.FromString,
                    response_serializer=login__pb2.AnswerResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'lms.LMS', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('lms.LMS', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class LMS(object):
    """Define the LMS gRPC services
    """

    @staticmethod
    def Login(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/lms.LMS/Login',
            login__pb2.LoginRequest.SerializeToString,
            login__pb2.LoginResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UploadAssignment(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/lms.LMS/UploadAssignment',
            login__pb2.AssignmentUploadRequest.SerializeToString,
            login__pb2.AssignmentUploadResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CheckFeedback(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/lms.LMS/CheckFeedback',
            login__pb2.FeedbackRequest.SerializeToString,
            login__pb2.FeedbackResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CheckAssignmentStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/lms.LMS/CheckAssignmentStatus',
            login__pb2.AssignmentStatusRequest.SerializeToString,
            login__pb2.AssignmentStatusResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GradeAssignment(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/lms.LMS/GradeAssignment',
            login__pb2.GradeAssignmentRequest.SerializeToString,
            login__pb2.GradeAssignmentResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def PostQuery(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/lms.LMS/PostQuery',
            login__pb2.QueryRequest.SerializeToString,
            login__pb2.QueryResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CheckQueryReply(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/lms.LMS/CheckQueryReply',
            login__pb2.CheckQueryReplyRequest.SerializeToString,
            login__pb2.CheckQueryReplyResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ViewQueries(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/lms.LMS/ViewQueries',
            login__pb2.QueryViewRequest.SerializeToString,
            login__pb2.QueryViewResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ReplyToQuery(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/lms.LMS/ReplyToQuery',
            login__pb2.ReplyToQueryRequest.SerializeToString,
            login__pb2.ReplyToQueryResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UploadCourseMaterial(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/lms.LMS/UploadCourseMaterial',
            login__pb2.CourseMaterialUploadRequest.SerializeToString,
            login__pb2.CourseMaterialUploadResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListCourseMaterials(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/lms.LMS/ListCourseMaterials',
            login__pb2.CourseMaterialListRequest.SerializeToString,
            login__pb2.CourseMaterialListResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DownloadCourseMaterial(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/lms.LMS/DownloadCourseMaterial',
            login__pb2.CourseMaterialDownloadRequest.SerializeToString,
            login__pb2.CourseMaterialDownloadResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ViewUngradedAssignments(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/lms.LMS/ViewUngradedAssignments',
            login__pb2.ViewUngradedAssignmentsRequest.SerializeToString,
            login__pb2.ViewUngradedAssignmentsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ValidateToken(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/lms.LMS/ValidateToken',
            login__pb2.ValidateTokenRequest.SerializeToString,
            login__pb2.ValidateTokenResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GenerateAnswer(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/lms.LMS/GenerateAnswer',
            login__pb2.AnswerRequest.SerializeToString,
            login__pb2.AnswerResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def AskQuestion(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/lms.LMS/AskQuestion',
            login__pb2.QuestionRequest.SerializeToString,
            login__pb2.AnswerResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class RaftStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.RequestVote = channel.unary_unary(
                '/lms.Raft/RequestVote',
                request_serializer=login__pb2.RequestVoteRequest.SerializeToString,
                response_deserializer=login__pb2.RequestVoteReply.FromString,
                _registered_method=True)
        self.AppendEntries = channel.unary_unary(
                '/lms.Raft/AppendEntries',
                request_serializer=login__pb2.AppendEntriesRequest.SerializeToString,
                response_deserializer=login__pb2.AppendEntriesReply.FromString,
                _registered_method=True)


class RaftServicer(object):
    """Missing associated documentation comment in .proto file."""

    def RequestVote(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AppendEntries(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_RaftServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'RequestVote': grpc.unary_unary_rpc_method_handler(
                    servicer.RequestVote,
                    request_deserializer=login__pb2.RequestVoteRequest.FromString,
                    response_serializer=login__pb2.RequestVoteReply.SerializeToString,
            ),
            'AppendEntries': grpc.unary_unary_rpc_method_handler(
                    servicer.AppendEntries,
                    request_deserializer=login__pb2.AppendEntriesRequest.FromString,
                    response_serializer=login__pb2.AppendEntriesReply.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'lms.Raft', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('lms.Raft', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class Raft(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def RequestVote(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/lms.Raft/RequestVote',
            login__pb2.RequestVoteRequest.SerializeToString,
            login__pb2.RequestVoteReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def AppendEntries(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/lms.Raft/AppendEntries',
            login__pb2.AppendEntriesRequest.SerializeToString,
            login__pb2.AppendEntriesReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
